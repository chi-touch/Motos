#name: Deploy to AWS EC2
#
#on:
#  push:
#    branches:
#      - in-dev
#
#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#
#      - name: Restore Maven Package
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build Docker image
#        run: docker build -t chichia/moto:latest .
#
#      - name: Push Docker image to Docker Hub
#        run: docker push chichia/moto:latest
#
#      - name: Create PEM file
#        run: |
#          echo "${{ secrets.AWS_PEM }}" > aws_key.pem
#          chmod 400 aws_key.pem
#
#      - name: Deploy to AWS EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no -i aws_key.pem ubuntu@${{ secrets.AWS_IP_ADDRESS }} << 'EOF'
#             # Add ubuntu user to docker group
#             sudo usermod -aG docker ubuntu
#
#             # Restart docker service
#             sudo systemctl restart docker
#
#             # Refresh user session (forces Docker group permissions)
#             exit
#          EOF
#
#      # New SSH session to pull and run the Docker container
#      - name: Pull and run Docker container
#        run: |
#          ssh -o StrictHostKeyChecking=no -i aws_key.pem ubuntu@${{ secrets.AWS_IP_ADDRESS }} << 'EOF'
#             # Pull the latest Docker image
#             docker pull chichia/moto:latest
#
##             # Stop and remove any existing containers
##             docker stop moto || true
##             docker rm moto || true
#
#          # Stop and remove any existing container with the same name
#          if [ "$(docker ps -aq -f name=moto-class-container)" ]; then
#            docker stop moto-class-container
#            docker rm moto-class-container
#          fi
#
#          # Pull the latest image and run it
##          sudo docker pull chichia/moto:latest
#
#             # Run the new container
#             docker run -d --name moto-container -p 8080:8082 chichia/moto:latest
#          EOF


name: Deploy to AWS EC2

on:
  push:
    branches:
      - in-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Package
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t chichia/moto:latest .

      - name: Push Docker image to Docker Hub
        run: docker push chichia/moto:latest

      - name: Create PEM file
        run: |
          echo "${{ secrets.AWS_PEM }}" > aws_key.pem
          chmod 400 aws_key.pem

      - name: Deploy to AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ubuntu@${{ secrets.AWS_IP_ADDRESS }} << 'EOF'
             # Add ubuntu user to docker group
             sudo usermod -aG docker ubuntu
          
             # Restart docker service
             sudo systemctl restart docker
          
             # Refresh user session (forces Docker group permissions)
             exit
          EOF

      - name: Pull and run Docker container
        run: |
          ssh -o StrictHostKeyChecking=no -i aws_key.pem ubuntu@${{ secrets.AWS_IP_ADDRESS }} << 'EOF'
             # Stop and remove any existing container with the same name
             if [ "$(docker ps -aq -f name=moto-class-container)" ]; then
               docker stop moto-class-container
               docker rm moto-class-container
             fi
          
             # Pull the latest Docker image
             docker pull chichia/moto:latest
          
             # Run the new container with the .env file
             sudo docker run -d --env-file=.env --name moto-class-container -p 8080:8082 chichia/moto:latest
          EOF

